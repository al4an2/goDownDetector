// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sites_follow.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSiteFollow = `-- name: CreateSiteFollow :one
INSERT INTO site_follows(
    id,
    created_at,
    updated_at,
    user_id,
    site_id)
VALUES($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, user_id, site_id
`

type CreateSiteFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	SiteID    uuid.UUID
}

func (q *Queries) CreateSiteFollow(ctx context.Context, arg CreateSiteFollowParams) (SiteFollow, error) {
	row := q.db.QueryRowContext(ctx, createSiteFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.SiteID,
	)
	var i SiteFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.SiteID,
	)
	return i, err
}

const deleteSiteFollow = `-- name: DeleteSiteFollow :exec
DELETE FROM site_follows 
USING users 
WHERE site_follows.user_id = users.user_id
AND site_follows.id = $1 
AND (site_follows.user_id = $2 or users.usertype = "admin")
`

type DeleteSiteFollowParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteSiteFollow(ctx context.Context, arg DeleteSiteFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteSiteFollow, arg.ID, arg.UserID)
	return err
}

const getAllSiteFollows = `-- name: GetAllSiteFollows :many
SELECT id, created_at, updated_at, user_id, site_id FROM site_follows
`

func (q *Queries) GetAllSiteFollows(ctx context.Context) ([]SiteFollow, error) {
	rows, err := q.db.QueryContext(ctx, getAllSiteFollows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SiteFollow
	for rows.Next() {
		var i SiteFollow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSiteFollows = `-- name: GetSiteFollows :many
SELECT id, created_at, updated_at, user_id, site_id FROM site_follows WHERE user_id = $1
`

func (q *Queries) GetSiteFollows(ctx context.Context, userID uuid.UUID) ([]SiteFollow, error) {
	rows, err := q.db.QueryContext(ctx, getSiteFollows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SiteFollow
	for rows.Next() {
		var i SiteFollow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.SiteID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
